* Windows
py command

(Python was not found; run without arguments to install from the Microsoft Store, or disable this shortcut from Settings > Manage App Execution Aliases.)[https://stackoverflow.com/questions/65348890/python-was-not-found-run-without-arguments-to-install-from-the-microsoft-store]
* Environments
** Poetry
(Poetry Infoworld article)[https://www.infoworld.com/article/3527850/how-to-manage-python-projects-with-poetry.html]
https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-1/
https://www.pythoncheatsheet.org/blog/python-projects-with-poetry-and-vscode-part-2/

* Writing Compatible Code

If you need to use Python 2 now and want to move more easily to Python
3 in the future when it becomes the standard version on your system,
use one of the bridge packages. A good strategy is to import the
standard __future__ module. This includes features to make Python 2
work like Python 3, and leave Python 3 code unharmed.

** print_function — parenthesized arguments, redirection, and output separators.
** unicode_literals — quoted strings are Unicode sequences, not bytes.
** division — dividing integers with / makes a float, with // makes an integer.
** absolute_import — ensure you’re importing what you expect when multiple modules have the same name.

* Hints and Tips

** Comparing to None
Have to use `is` and `is not` when checking for `None`

** The `in` operator

The `in` operator is a membership test. It can be used to see if one
thing is "in" another. One cool usecase is checking substrings. Here
is a way to see if one file is a subset of another:

https://unix.stackexchange.com/questions/114877/how-to-know-if-a-text-file-is-a-subset-of-another#114882

#+BEGIN_SRC
python -c 'x=open("file1").read();y=open("file2").read()";print(x in y)'
#+END_SRC

This reads each file into a variable as a string of bytes and then
looks for one string in the other file. This is much better than
line-by-line comparison.

** Snippets
*** Strings

Print string as hex:
#+BEGIN_SRC python
s = "Hello World !!"
":".join("{:02x}".format(ord(c)) for c in s)
#+END_SRC


** Virtual Environments

In Anaconda, you can use conda

#+BEGIN_SRC bash
conda create --name <envname>

conda create --name test python=3.6
conda env list
source activate <env>

#+END_SRC

In generic python you can do
#+BEGIN_SRC
mdd_toolkit) ➜  ~/scratch/project  $ pyvenv
WARNING: the pyenv script is deprecated in favour of `python3.6 -m venv`
usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear]
            [--upgrade] [--without-pip] [--prompt PROMPT]
            ENV_DIR [ENV_DIR ...]
venv: error: the following arguments are required: ENV_DIR
#+END_SRC
** Packaging
python setup.py bdist_wheel ==> builds a wheel archive.

** OO
Derived classes don't call base class __init__ (or other) functions by default. Child overrides them, so you have to be explicit.

#+BEGIN_SRC python
>>> class Base:
...     def __init__(self):
...             print("Base::__init__")
...
>>> class Derrived(Base):
...     def __init__(self):
...             print("Derrived::__init__")
...
...
>>> obj = Derrived()
Derrived::__init__
#+END_SRC

To make this do what I expect:

#+BEGIN_SRC

>>> class Derrived(Base):
...     def __init__(self):
...             print("Calling Base.__init__")
...             Base.__init__(self)
...             print("Derived.__init__ end")
...
>>> obj = Derrived()
Calling Base.__init__
Base::__init__
Derived.__init__ end
#+END_SRC

And the attributes are not shared, so I can't do obj.val and see the Base "val".

** Parameters and arguments
This seems overly complicated but I got bit by it in some code I've been working with. When reading about python you often hear about positional and keyword arguments. Those are on the function call side. On the definition side you can have named parameters and variadic extensions. And you can have default values for parameters. Let's see if I can sort this out a little.

If I have code like this:
#+BEGIN_SRC python
class B:
      def bfunc(self,a,b=77):
            print("{},{}".format(a,b))

#+END_SRC

I've defined a method, `bfunc`, which has three positional parameters, `self`, `a`, and `b` and `b` has a default value.

Now if we look at some calls to this function (where we have arguments)
#+BEGIN_SRC
In [32]: b = B()

In [33]: b.bfunc(3,4)
3,4

In [34]: b.bfunc(3)
3,77

In [35]: b.bfunc(a=32,b=44)
32,44

#+END_SRC
So in the first call, I pass positional arguments.
In the second call I pass one positional argument and get the default for the second.
In the third I pass both as keyword arguments... these get mapped to the parameters.

#+BEGIN_SRC
In [36]: b.bfunc(10,a=32)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-36-9099345fd78b> in <module>()
----> 1 b.bfunc(10,a=32)

TypeError: bfunc() got multiple values for argument 'a'
#+END_SRC

This is interesting, here I passed a positional and a keyword argument that both map to the same parameter. Error. :-)

* Pandas
** Examples
Create a dataframe using the constructor. Helps to see how the
different fields interact.
#+BEGIN_SRC
>>> df3 = pd.DataFrame([[0,100,50],[-1,12,6],[3,6,4.5]],['A312','A313','A315'],columns=['min','max','mean'])
>>> df3
      min  max  mean
A312    0  100  50.0
A313   -1   12   6.0
A315    3    6   4.5
#+END_SRC

* Seaborn
#+BEGIN_SRC
import numpy as np
import matplotlib.pyplot as plt
import seaborn

x = np.arrange(100) * 0.1
y = np.sin(x)

seaborn.scatterplot(x=x,y=y,hue=y)
plt.show()
#+END_SRC

